        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               overarching clone
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION clone_creature
    STR_VAR
           creature=""
           edits=""
           editstring=""
           allow_missing=""
    BEGIN
         LAUNCH_ACTION_FUNCTION clone_template
                  STR_VAR file_list=EVALUATE_BUFFER ~%creature%~
                          file_prefix=~CRE~
                          edits
                          editstring
                          allow_missing
         END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               overarching edit
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION edit_creature
    STR_VAR
           creature=""
           file=""
           edits=""
           editstring=""
           tv="no"
           allow_missing="no"
    BEGIN
         LAUNCH_ACTION_FUNCTION edit_template
                  STR_VAR file_list=EVALUATE_BUFFER ~%creature%~
                          file_prefix=~CRE~
                          external_file=EVALUATE_BUFFER ~%file%~
                          edits editstring allow_missing
                          tv=EVALUATE_BUFFER ~%tv%~
         END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               overarching regexp
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION edit_all_creatures
    STR_VAR
           edits=""
           editstring=""
    BEGIN
         LAUNCH_ACTION_FUNCTION regexp_template
                   STR_VAR       file_prefix=~CRE~
                          edits
                          editstring
         END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               overarching make
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION make_creature
    STR_VAR
           creature=""
           edits=""
           editstring=""
    BEGIN
         LAUNCH_ACTION_FUNCTION make_template
                  STR_VAR file_list=EVALUATE_BUFFER ~%creature%~
                          file_prefix=~CRE~
                          edits=EVALUATE_BUFFER ~%edits%~
                          editstring=EVALUATE_BUFFER ~%editstring%~
                          build_before= CRE_build
                          build_after = CRE_postbuild
         END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               offsets [negative numbers code a fixed number]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

<<<<<<<< cre_offsets.2da
TYPE                 offset_loc      offset_length       entrynum_loc  entrynum_length   entry_length
known_spell         0x2a0           4                   0x2a4         4                 0xc
memorization_info    0x2a8           4                   0x2ac         4                 0x10
memorized_spell     0x2b0           4                   0x2b4         4                 0xc
item_slots           0x2b8           4                   -37             4                 0x2
item                0x2bc           4                   0x2c0         4                 0x14
effect              0x2c4           4                   0x2c8         4                 0x108
>>>>>>>>

// leaving effects for now, it depends on cretype
OUTER_SPRINT ~offset_readin_lookup_2da~ ~cre_offsets~
OUTER_SPRINT ~offset_readin_file_prefix~ ~CRE~
LAUNCH_ACTION_MACRO read_in_offsets


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               simple data-field edits
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACTION_DEFINE_ASSOCIATIVE_ARRAY cre_fields BEGIN
   name1_string=> ~0x8,LONG~
   name2_string=> ~0xc,LONG~
   xp_value=> ~0x14,LONG~
   xp_total=> ~0x18,LONG~
   color_metal => ~0x2c,BYTE~
   color_minor => ~0x2d,BYTE~
   color_major => ~0x2e,BYTE~
   color_skin => ~0x2f,BYTE~
   color_leather => ~0x30,BYTE~
   color_armor => ~0x31,BYTE~
   color_hair => ~0x32,BYTE~
   hide_in_shadows => ~0x45,BYTE~
   detect_illusions => ~0x64,BYTE~
   set_traps => ~0x65,BYTE~
   lore =>~0x66,BYTE~
   open_locks=>~0x67,BYTE~
   move_silently=>~0x68,BYTE~
   find_traps=>~0x69,BYTE~
   pick_pockets=>~0x6a,BYTE~
   resist_fire =>~0x59,BYTE~
   resist_cold =>~0x5a,BYTE~
   resist_electricity =>~0x5b,BYTE~
   resist_acid =>~0x5c,BYTE~
   resist_magic =>~0x5d,BYTE~
   resist_magic_fire =>~0x5e,BYTE~
   resist_magic_cold =>~0x5f,BYTE~
   resist_slashing =>~0x60,BYTE~
   resist_crushing =>~0x61,BYTE~
   resist_piercing =>~0x62,BYTE~
   resist_missile =>~0x63,BYTE~
   level     =>    ~0x234,BYTE~
   level1     =>    ~0x234,BYTE~
   level2    =>    ~0x235,BYTE~
   level3    =>    ~0x236,BYTE~
   str       =>    ~0x238,BYTE~
   str_ex    =>    ~0x239,BYTE~
   int       =>    ~0x23a,BYTE~
   wis       =>    ~0x23b,BYTE~
   dex       =>    ~0x23c,BYTE~
   con       =>    ~0x23d,BYTE~
   cha       =>    ~0x23e,BYTE~
   strength       =>    ~0x238,BYTE~
   strength_ex    =>    ~0x239,BYTE~
   intelligence       =>    ~0x23a,BYTE~
   wisdom       =>    ~0x23b,BYTE~
   dexterity       =>    ~0x23c,BYTE~
   constitution       =>    ~0x23d,BYTE~
   charisma       =>    ~0x23e,BYTE~
   script_override  =>    ~0x248,ASCII~
   script_class     =>    ~0x250,ASCII~
   script_race      =>    ~0x258,ASCII~
   script_general   =>    ~0x260,ASCII~
   script_default   =>    ~0x268,ASCII~
   specifics        =>    ~0x274,BYTE~
   save_vs_death    =>    ~0x54,BYTE~
   save_vs_wand    =>    ~0x55,BYTE~
   save_vs_wands    =>    ~0x55,BYTE~
   save_vs_poly     =>    ~0x56,BYTE~
   save_vs_polymorph     =>    ~0x56,BYTE~
   save_vs_breath   =>    ~0x57,BYTE~
   save_vs_spell    =>    ~0x58,BYTE~
   save_vs_spells    =>    ~0x58,BYTE~
   thac0            =>    ~0x52,BYTE~
   attacks          =>    ~0x53,BYTE~ 
   hp_max           =>    ~0x26,SHORT~
   hp_current       =>    ~0x24,SHORT~
   dv               =>    ~0x280,ASCII20~
   dialog           =>    ~0x2cc,ASCII~
   animation_code   =>     ~0x28,SHORT~
   effect_type      =>     ~0x33,BYTE~
   ac_natural       =>     ~0x46,SHORT~
   ac_effective     =>     ~0x48,SHORT~
   morale           =>     ~0x23f,BYTE~
   morale_break     =>     ~0x240,BYTE~
END

LAUNCH_ACTION_FUNCTION build_simple_data_field_editors STR_VAR lookup_table=cre_fields function_prefix=CRE END

ACTION_DEFINE_ASSOCIATIVE_ARRAY cre_rel_fields BEGIN
     item_resource => ~0x0,ASCII~
     item_charges_1 => ~0xa,SHORT~
     item_charges_2 => ~0xc,SHORT~
     item_charges_3 => ~0xe,SHORT~
     spell_resource => ~0x0,ASCII~
     opcode => ~0x8,LONG~
     resource=>~0x28,ASCII~
     target=>~0xc,LONG~
     effect_resource=>~0x28,ASCII~
     timing=>~0x1c,LONG~
     probability1=>~0x24,SHORT~
     probability2=>~0x26,SHORT~
     duration=>~0x20,LONG~
     parameter1 => ~0x14,LONG~
     parameter2 => ~0x18,LONG~
     item_slot => ~0x0,SHORT~
     memorized_spell => ~0x0,ASCII~
END

LAUNCH_ACTION_FUNCTION build_simple_data_field_editors STR_VAR lookup_table=cre_rel_fields offset_base=~offset_base~ function_prefix=CRE END




ACTION_DEFINE_ASSOCIATIVE_ARRAY cre_bit_fields BEGIN
      state_sleeping => ~0x20,0~
      state_berserk => ~0x20,1~
      state_panic  => ~0x20,2~
      state_stunned  => ~0x20,3~
      state_invisible  => ~0x20,4~
      state_helpless  => ~0x20,5~
      state_frozen_death  => ~0x20,6~
      state_stone_death  => ~0x20,7~
      state_exploding_death => ~0x21,0~
      state_flame_death =>~0x21,1~
      state_acid_death=>~0x21,2~
      state_dead=>~0x21,3~
      state_silenced=>~0x21,4~
      state_charmed=>~0x21,5~
      state_poisoned=>~0x21,6~
      state_hasted=>~0x21,7~
      state_slowed=>~0x22,0~
      state_infravision=>~0x22,1~
      state_blind=>~0x22,2~
      state_diseased=>~0x22,3~
      state_feebleminded=>~0x22,4~
      state_nondetection=>~0x22,5~
      state_improved_invisibility=>~0x22,6~
      state_bless=>~0x22,7~
      state_chant=>~0x23,0~
      state_drawuponholymight=>~0x23,1~
      state_luck=>~0x23,2~
      state_aid=>~0x23,3~
      state_chantbad=>~0x23,4~
      state_blur=>~0x23,5~
      state_mirrorimage=>~0x23,6~
      state_confused=>~0x23,7~
      // I'm sceptical about needing many others so won't fill them in yet
      state_hidden => ~0x22,3~
END

LAF build_flag_data_field_editors STR_VAR lookup_table=cre_bit_fields function_prefix=CRE END






//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               composite data-field edits
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// current and max hp

DEFINE_PATCH_FUNCTION CRE_hitpoints STR_VAR arguments="" BEGIN
   LAUNCH_PATCH_FUNCTION CRE_hp_max STR_VAR arguments=EVALUATE_BUFFER ~%arguments%~ END
   LAUNCH_PATCH_FUNCTION CRE_hp_current STR_VAR arguments=EVALUATE_BUFFER ~%arguments%~ END
END

LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_hitpoints - -~ END

// all three levels

DEFINE_PATCH_FUNCTION CRE_level_all STR_VAR arguments="" BEGIN
   LPF CRE_level STR_VAR arguments END
   LPF CRE_level2 STR_VAR arguments END
   LPF CRE_level3 STR_VAR arguments END
END

LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_level_all - -~ END

// both ACs

DEFINE_PATCH_FUNCTION CRE_ac STR_VAR arguments="" BEGIN
   LPF CRE_ac_natural STR_VAR arguments END
   LPF CRE_ac_effective STR_VAR arguments END
END

LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_ac - -~ END


// all saving throws

DEFINE_PATCH_FUNCTION CRE_saves STR_VAR arguments="" BEGIN
   INNER_ACTION BEGIN
           LAUNCH_ACTION_FUNCTION decompose_CSV
                     STR_VAR input=EVALUATE_BUFFER ~%arguments%~
                     RET save_vs_death=argument_0
                         save_vs_wands=argument_1
                         save_vs_poly=argument_2
                         save_vs_breath=argument_3
                         save_vs_spell=argument_4
           END
   END
   PATCH_FOR_EACH save IN death wands poly breath spell BEGIN
      SPRINT ~string~ ~LAUNCH_PATCH_FUNCTION CRE_save_vs_%save% STR_VAR arguments=EVALUATE_BUFFER "%percentage%save_vs_%save%%percentage%" END~
      LAUNCH_PATCH_FUNCTION patch_reinclude_this STR_VAR input=EVALUATE_BUFFER ~%string%~ END
   END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_saves - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               data-field edits involving lookup
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACTION_DEFINE_ASSOCIATIVE_ARRAY ~cre_ids_fields~ BEGIN
   animation => ~0x28,SHORT,ANIMATE~
   allegiance => ~0x270,BYTE,EA~
   general => ~0x271,BYTE,general~
   race => ~0x272,BYTE,race~
   class => ~0x273,BYTE,class~
   gender => ~0x275,BYTE,gender~
   alignment => ~0x27b,BYTE,align~
   kit_vanilla => ~0x244,LONG_REVERSED,kit~
   kit => ~0x244,LONG_REVERSED,dw#kit~
END

LAUNCH_ACTION_FUNCTION build_IDS_data_field_editors STR_VAR lookup_table=cre_ids_fields function_prefix=CRE END

// we'll overwrite gender by hand to also set the Sex field

DEFINE_PATCH_FUNCTION ~CRE_gender~
    STR_VAR arguments=""
BEGIN
    SET value = IDS_OF_SYMBOL (gender "%arguments%")
    PATCH_IF value>0 BEGIN
            WRITE_BYTE 0x275 value
            PATCH_IF ~%arguments%~ STRING_EQUAL_CASE ~FEMALE~ BEGIN
               WRITE_BYTE 0x237 2
            END
    END ELSE BEGIN
            LPF patch_display_warning STR_VAR warning=EVALUATE_BUFFER "tried to set nonexistent %idsfile% entry %arguments%" END
   END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_gender - -~ END

// kit needs special treatment

COPY ~%scsroot%/lib/dw#kit.ids~ ~override~

DEFINE_PATCH_FUNCTION CRE_kit
    STR_VAR arguments=""
BEGIN
    TO_UPPER arguments
    PATCH_MATCH ~%arguments%~ WITH
    ASSASSIN BEGIN
       LPF CRE_kit_vanilla STR_VAR arguments=ASSASIN END
    END
    BARBARIAN BEGIN
         WRITE_LONG 0x244 0x4000
    END
    WILDMAGE BEGIN
         WRITE_LONG 0x244 0x8000
    END
    ARCHER BEGIN
       LPF CRE_kit_vanilla STR_VAR arguments=FERALAN END
    END
    ABJURER CONJURER DIVINER ILLUSIONIST TRANSMUTER ENCHANTER NECROMANCER INVOKER BEGIN
       LPF CRE_kit_vanilla STR_VAR arguments=EVALUATE_BUFFER ~MAGESCHOOL_%arguments%~ END
    END
    AVENGER BEGIN
         LPF CRE_kit_vanilla STR_VAR arguments=BEASTFRIEND END
    END
    NO_KIT NONE BEGIN
         WRITE_LONG 0x244 0
    END
    DEFAULT
       LPF CRE_kit_vanilla STR_VAR arguments END
    END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_kit - -~ END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               set movement rate (code adapted from aTweaks)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_movement STR_VAR arguments="" BEGIN
       SET move=~%arguments%~
       LPF CRE_delete_opcodes STR_VAR file_prefix=CRE arguments=~126 176~ END
       LPF CRE_add_effect_inline STR_VAR file_prefix=CRE arguments=EVALUATE_BUFFER ~opcode=>176 target=>1 timing=>9 parameter2=>1 parameter1=>%move%~ END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_movement - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               strip scripts
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_strip_script  /// takes as argument list of scripts
      STR_VAR arguments=""
BEGIN
      PATCH_IF ~%arguments%~ STRING_EQUAL_CASE all BEGIN
           WRITE_ASCII 0x248 ~~ (0x28)
      END ELSE BEGIN

      PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
       LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET arguments=list script=entry END
       FOR (i=0x248;i<0x270;i=i+8) BEGIN
          READ_ASCII i ~current_script~
          PATCH_IF ~%current_script%~ STRING_EQUAL_CASE ~%script%~ BEGIN
             WRITE_ASCII i ~~ (8)
          END
       END
       LPF CRE_strip_script STR_VAR arguments=EVALUATE_BUFFER ~%arguments%~ END
      END
      END
END

LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_strip_script - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               swap scripts
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_swap_script  /// takes as argument hash of maps
      STR_VAR arguments=""
BEGIN
      PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
       LPF return_first_pair STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET arguments=list oldscript=key newscript=value END
       FOR (i=0x248;i<0x270;i=i+8) BEGIN
          READ_ASCII i ~current_script~
          PATCH_IF ~%current_script%~ STRING_EQUAL_CASE ~%oldscript%~ BEGIN
             WRITE_ASCIIE i ~%newscript%~ (8)
          END
       END
       LPF CRE_swap_script STR_VAR arguments=EVALUATE_BUFFER ~%arguments%~ END
      END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_swap_script - -~ END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               invert scripts
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_invert_scripts  /// takes as argument hash of maps
      STR_VAR arguments=""
BEGIN
      PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
       LPF return_first_pair STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET arguments=list oldscript=key newscript=value END
       FOR (i=0x248;i<0x270;i=i+8) BEGIN
          READ_ASCII i ~current_script~
          PATCH_IF ~%current_script%~ STRING_EQUAL_CASE ~%oldscript%~ BEGIN
             WRITE_ASCIIE i ~%newscript%~ (8)
          END
          PATCH_IF ~%current_script%~ STRING_EQUAL_CASE ~%newscript%~ BEGIN
             WRITE_ASCIIE i ~%oldscript%~ (8)
          END
       END
       LPF CRE_invert_scripts STR_VAR arguments END
      END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_invert_scripts - -~ END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               enforce script order (argument is "X above Y" or "X below Y")
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_enforce_script_order
    STR_VAR arguments=""
BEGIN
   LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET script1=entry list=list END
   LPF return_first_entry STR_VAR list RET list=list abovebelow=entry END
   PATCH_IF (~%abovebelow%~ STRING_COMPARE_CASE ~above~ && ~%abovebelow%~ STRING_COMPARE_CASE ~below~) BEGIN
      LPF patch_display_warning STR_VAR ~Warning: malformed argument in CRE_enforce_script_order~ END
   END
   LPF return_first_entry STR_VAR list RET list=list script2=entry END
   PATCH_IF (~%abovebelow%~ STRING_EQUAL_CASE above) BEGIN
      SPRINT top ~%script1%~
      SPRINT bottom ~%script2%~
   END ELSE BEGIN
      SPRINT top ~%script2%~
      SPRINT bottom ~%script1%~
      TO_LOWER top
      TO_LOWER bottom
   END
   SET top_loc=~-1~
   SET bottom_loc=~-1~
   FOR (i=0x248;i<0x268;i+=8) BEGIN
      READ_ASCII i script
      TO_LOWER script
      PATCH_MATCH ~%script%~ WITH
         ~%top%~ BEGIN
            SET top_loc=i
         END
         ~%bottom%~ BEGIN
            SET bottom_loc=i
         END
         DEFAULT END
   END
   PATCH_IF ((top_loc>bottom_loc) && (bottom_loc>0)) BEGIN
         WRITE_ASCIIE top_loc ~%bottom%~ (8)
         WRITE_ASCIIE bottom_loc ~%top%~ (8)
   END


END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_enforce_script_order - -~ END




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              slot in this script where you can find space, from bottom up
/////////////              if the argument has the form "script1 above script2", insert the script script1 immediately
/////////////              above script2. Return the location of the new script.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_insert_script
     STR_VAR
         arguments=""
         filename=""
     RET new_loc
BEGIN SET success=0
          new_loc=~-1~
     // parse the argument
      LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET script_new=entry list=list END
      PATCH_IF ~%list%~ STRING_COMPARE_CASE ~~ BEGIN // it's a relative insertion
        LPF return_first_entry STR_VAR list RET loc_instruction=entry list=list END
        LPF strip_spaces_from_string STR_VAR string=EVALUATE_BUFFER ~%list%~ RET script_old=string END
        // find the old script
        LPF CRE_locate_script STR_VAR script=EVALUATE_BUFFER ~%script_old%~ RET loc=value END
        PATCH_IF loc>=0 BEGIN
              LPF CRE_bump_down INT_VAR loc RET value=value END
              PATCH_IF value=1 BEGIN
                 SET high=loc
                 SET low=loc+8
                 SET success=1
              END ELSE BEGIN
                 LPF CRE_bump_up INT_VAR loc RET value=value END
                 PATCH_IF value=1 BEGIN
                    SET high=loc - 8
                    SET low=loc
                    SET success=1
                 END
              END
              PATCH_IF success=1 BEGIN
               TO_UPPER ~loc_instruction~
               PATCH_MATCH ~%loc_instruction%~ WITH
               above before BEGIN
                  WRITE_ASCIIE high ~%script_new%~ (8)
                  WRITE_ASCIIE low ~%script_old%~ (8)
                  SET new_loc=high
               END
               below after BEGIN
                  WRITE_ASCIIE high ~%script_old%~ (8)
                  WRITE_ASCIIE low ~%script_new%~ (8)
                  SET new_loc=low
               END
               DEFAULT
                 LPF patch_display_warning STR_VAR warning=EVALUATE_BUFFER ~Unrecognised command %arguments% in insert_script~ END
               END
              END
        END
      END ELSE BEGIN // it's straightforward
       FOR (i=0x268;i>0x240;i=i - 8) BEGIN
        READ_ASCII i ~test~
        PATCH_IF ~%test%~ STRING_EQUAL_CASE ~~ OR ~%test%~ STRING_EQUAL_CASE ~none~ BEGIN
           SET success=1
           SET new_loc=i
           WRITE_ASCIIE i ~%script_new%~ (8)
           SET i=0
        END
       END
      END
      PATCH_IF success=0 BEGIN
          LAUNCH_PATCH_FUNCTION patch_display_warning STR_VAR warning=EVALUATE_BUFFER "Failed to insert script %arguments% in file %filename%" END
      END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_insert_script - -~ END



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_locate_script // find the location of this script
        STR_VAR script=""
        RET value
BEGIN
        SET value= ~-1~
        FOR (i=0x248;i<0x270;i+=8) BEGIN
           READ_ASCII i test
           PATCH_IF ~%test%~ STRING_EQUAL_CASE ~%script%~ BEGIN
              SET value=i
              SET i=0x270
           END
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_locate_script - -~ END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_first_gap_below // find the first gap below location loc
        INT_VAR loc=0x248
        RET value
BEGIN
        SET value= ~-1~
        FOR (i=loc;i<0x270;i+=8) BEGIN
           READ_ASCII i test
           PATCH_IF ~%test%~ STRING_EQUAL_CASE ~~ OR ~%test%~ STRING_EQUAL_CASE ~none~ BEGIN
              SET value=i
              SET i=0x270
           END
        END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_first_gap_above // find the first gap above location loc
        INT_VAR loc=0x248
        RET value
BEGIN
        SET value= ~-1~
        FOR (i=loc;i>0x240;i=i - 8) BEGIN
           READ_ASCII i test
           PATCH_IF ~%test%~ STRING_EQUAL_CASE ~~ OR ~%test%~ STRING_EQUAL_CASE ~none~ BEGIN
              SET value=i
              SET i=0x240
           END
        END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_bump_down // try to create a space below script at loc by bumping scripts down; return 1 if successful
        INT_VAR loc=0x248
        RET value
BEGIN
        SET value= 0
        LPF CRE_first_gap_below INT_VAR loc RET gap=value END
        PATCH_IF gap>=0 BEGIN
           FOR (i=gap - 8;i>loc;i=i - 8) BEGIN
              READ_ASCII i temp
              WRITE_ASCIIE (i+8) ~%temp%~ (8)
           END
           WRITE_ASCII (loc+8) ~~ (8)
           SET value=1
        END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_bump_up // try to create a space above script at loc by bumping scripts up; return 1 if successful
        INT_VAR loc=0x248
        RET value
BEGIN
        SET value= 0
        LPF CRE_first_gap_above INT_VAR loc RET gap=value END
        PATCH_IF gap>=0 BEGIN
           FOR (i=gap+8;i<loc;i+=8) BEGIN
              READ_ASCII i temp
              WRITE_ASCIIE (i - 8) ~%temp%~ (8)
           END
           WRITE_ASCII (loc - 8) ~~ (8)
           SET value=1
        END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               rearrange scripts and add a new one
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION CRE_insert_script_low
     STR_VAR
         arguments=""
         filename=""
BEGIN
     FOR (i=0x268;i>0x240;i=i - 8) BEGIN
        READ_ASCII i ~test~
        SET blank=0
        PATCH_IF ~%test%~ STRING_EQUAL_CASE ~~ OR ~%test%~ STRING_EQUAL_CASE ~none~ BEGIN
           SET blank=i
           SET i=0
        END
     END
     PATCH_IF blank=0 BEGIN
          LAUNCH_PATCH_FUNCTION patch_display_warning STR_VAR warning=EVALUATE_BUFFER "Failed to find a space to insert script %arguments% in file %filename%" END
     END ELSE BEGIN
           FOR (i=blank;i<0x268;i=i+8) BEGIN
              READ_ASCII i+8 ~move~
              WRITE_ASCIIE i ~%move%~ (8)
           END
           WRITE_ASCIIE 0x268 ~%arguments%~ (8)
     END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_insert_script_low - -~ END



DEFINE_PATCH_FUNCTION CRE_insert_script_high
     STR_VAR
         arguments=""
         filename=""
BEGIN
     FOR (i=0x248;i<0x270;i=i + 8) BEGIN
        READ_ASCII i ~test~
        SET blank=0
        PATCH_IF ~%test%~ STRING_EQUAL_CASE ~~ OR ~%test%~ STRING_EQUAL_CASE ~none~ BEGIN
           SET blank=i
           SET i=0x270
        END
     END
     PATCH_IF blank=0 BEGIN
          LAUNCH_PATCH_FUNCTION patch_display_warning STR_VAR warning=EVALUATE_BUFFER "Failed to find a space to insert script %arguments% in file %filename%" END
     END ELSE BEGIN
           FOR (i=blank;i>0x248;i=i - 8) BEGIN
              READ_ASCII i - 8 ~move~
              WRITE_ASCIIE i ~%move%~ (8)
           END
           WRITE_ASCIIE 0x248 ~%arguments%~ (8)
     END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_insert_script_high - -~ END


DEFINE_PATCH_FUNCTION CRE_insert_script_above // legacy syntax
     STR_VAR
         arguments=""
         filename=""
BEGIN
   LPF CRE_insert_script_high STR_VAR arguments filename END
END

DEFINE_PATCH_FUNCTION CRE_insert_script_below // legacy syntax
     STR_VAR
         arguments=""
         filename=""
BEGIN
   LPF CRE_insert_script_low STR_VAR arguments filename END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               looks for a script anywhere and returns 1 if true
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_match_script
     STR_VAR 
         arguments=""
     RET
         value
BEGIN
   SET value=0
   FOR (i=0x248;i<0x270;i=i+8) BEGIN
      READ_ASCII i ~script~
      PATCH_IF ~%script%~ STRING_EQUAL_CASE ~%arguments%~ BEGIN
         SET value=1
         SET i=0x270
      END
   END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_match_script - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               add a spell by name alone (if spell has form SPELL(x), add it x times)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~QUICK_ADD_SPELL~ STR_VAR ~spellname~="" BEGIN
    LPF return_function_and_argument STR_VAR input=EVALUATE_BUFFER ~%spellname%~ RET spellname=function number=argument END

    PATCH_IF ~%number%~ STRING_EQUAL_CASE ~~ BEGIN
       SET number=1
    END
    LPF deabbreviate_spellname STR_VAR input=EVALUATE_BUFFER ~%spellname%~ RET spellname=spellname END
    SPRINT ~spell~ EVALUATE_BUFFER ~%%spellname%%~
    INNER_PATCH_SAVE spell ~%spell%~ BEGIN
      REPLACE_TEXTUALLY ~%percentage%~ ~~
    END
    PATCH_IF VARIABLE_IS_SET EVALUATE_BUFFER ~%%spellname%_LEVEL%~ BEGIN
      SET ~spell_level~= EVALUATE_BUFFER ~%%spellname%_LEVEL%~
      SPRINT ~spell_type~ EVALUATE_BUFFER ~%%spellname%_TYPE%~
    END ELSE BEGIN
      INNER_ACTION BEGIN
         COPY_EXISTING ~%spell%.spl~ ~override~
               LPF SPL_read_spell_type RET spell_type_num=value END
               PATCH_MATCH spell_type_num WITH
               1 BEGIN
                  SPRINT spell_type wizard
               END
               2 BEGIN
                  SPRINT spell_type priest
               END
               DEFAULT
                  SPRINT spell_type innate
               END
               LPF SPL_read_level RET spell_level=value END
               SET spell_level=spell_level - 1
         BUT_ONLY
      END
    END
    PATCH_IF ~%spell_type%~ STRING_EQUAL_CASE hla BEGIN
      INNER_ACTION BEGIN
       COPY_EXISTING ~%spell%.spl~ ~override~
            PATCH_MATCH SHORT_AT 0x1c WITH
            1 BEGIN 
               SPRINT spell_type wizard
            END
            2 BEGIN
               SPRINT spell_type priest
            END
            DEFAULT
               SPRINT spell_type innate
               SPRINT spell_level 0
            END
       BUT_ONLY
      END
    END
    FOR (i=0;i<number;i+=1) BEGIN
       LPF patch_reinclude_this STR_VAR input=EVALUATE_BUFFER "ADD_MEMORIZED_SPELL ~%spell%~ (%spell_level%) ~%spell_type%~" END
    END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               add spells from a list
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION CRE_add_spells
     STR_VAR arguments = ""
BEGIN
       PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
          LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET spellname=entry arguments=list END

          LPF QUICK_ADD_SPELL STR_VAR spellname END
          LPF CRE_add_spells STR_VAR arguments END
       END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_add_spells - -~ END



DEFINE_PATCH_FUNCTION CRE_remove_spells
     STR_VAR arguments = ""
BEGIN
     PATCH_MATCH ~%arguments%~ WITH
     all BEGIN
        REMOVE_KNOWN_SPELLS
        REMOVE_MEMORIZED_SPELLS
     END
     priest BEGIN
        LPF CRE_remove_spell_of_type STR_VAR arguments=SPPR END
     END
     mage wizard BEGIN
        LPF CRE_remove_spell_of_type STR_VAR arguments=SPWI END
     END
     innate BEGIN
        LPF CRE_remove_spell_of_type STR_VAR arguments=SPIN END
     END
     DEFAULT
        LPF process_string_list STR_VAR list =EVALUATE_BUFFER ~%arguments%~ function=CRE_remove_spell END
     END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_remove_spells - -~ END



DEFINE_PATCH_FUNCTION CRE_remove_spell_of_type
     STR_VAR arguments=""
BEGIN
     SPRINT ~list~ ~~
     SPRINT file_prefix CRE
     PATCH_FOR_EACH entry_type IN known_spell memorized_spell BEGIN
      LAUNCH_PATCH_MACRO get_offset_array
      PHP_EACH offset_array AS int=>spl_off BEGIN
        READ_ASCII spl_off check (4)
        READ_ASCII spl_off temp
        PATCH_IF ~%check%~ STRING_EQUAL_CASE ~%arguments%~ BEGIN
            SPRINT ~list~ ~%list% %temp%~
        END
      END
     END
     WHILE ~%list%~ STRING_COMPARE_CASE ~~ BEGIN
        LPF return_first_entry STR_VAR list RET spell=entry list=list END
        REMOVE_MEMORIZED_SPELL ~%spell%~
        REMOVE_KNOWN_SPELL ~%spell%~
     END
END

DEFINE_PATCH_FUNCTION CRE_remove_spell
     STR_VAR arguments = ""
BEGIN
    LPF deabbreviate_spellname STR_VAR input=EVALUATE_BUFFER ~%arguments%~ RET spellname=spellname END
    SPRINT ~spellcode~ EVALUATE_BUFFER ~%%spellname%%~
    REMOVE_MEMORIZED_SPELL ~%spellcode%~
    REMOVE_KNOWN_SPELL ~%spellcode%~
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              give immunity to a spell (opcode 206)
/////////////
/////////////              if we use "arguments" assume it's a string of entries
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_immunity_to_spell
       STR_VAR spellname=""
               spellcode=""
               arguments=""
BEGIN
       PATCH_IF ~%spellname%~ STRING_COMPARE_CASE ~~ BEGIN
              LPF deabbreviate_spellname STR_VAR input= EVALUATE_BUFFER ~%spellname%~ RET spellname=spellname END
              SPRINT spellcode EVALUATE_BUFFER ~%%spellname%%~
       END
       PATCH_IF ~%spellcode%~ STRING_COMPARE_CASE ~~ BEGIN
         LPF CRE_add_effect_inline STR_VAR arguments =EVALUATE_BUFFER ~opcode=>206 timing=>9 resource=>%spellcode%~ file_prefix=CRE END
       END
       PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
          LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET spell=entry arguments=list END
          INNER_ACTION BEGIN
                  ACTION_IF FILE_EXISTS_IN_GAME ~%spell%.spl~ BEGIN
                     OUTER_SPRINT spellcode ~%spell%~
                     OUTER_SPRINT spellname ~~
                  END ELSE BEGIN
                     OUTER_SPRINT spellname ~%spell%~
                     OUTER_SPRINT spellcode ~~
                  END
          END
          LPF CRE_immunity_to_spell STR_VAR arguments spellname spellcode END
       END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_immunity_to_spell - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              give immunity to a string (opcode 267)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_immunity_to_string
       STR_VAR arguments=""
BEGIN
       PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
          LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET entry=entry arguments=list END
         LPF CRE_add_effect_inline STR_VAR arguments =EVALUATE_BUFFER ~opcode=>267 timing=>9 parameter1=>%entry%~ file_prefix=CRE END
          LPF CRE_immunity_to_string STR_VAR arguments END
       END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_immunity_to_string - -~ END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              give immunity to an opcode (opcode 101)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_immunity_to_opcode
       STR_VAR arguments=""
BEGIN
       PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
          LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET entry=entry arguments=list END
         LPF delete_entries_inline STR_VAR arguments=EVALUATE_BUFFER ~type=>effect match=>combine_checks match_parameter=>"CRE_read_opcode=>101 CRE_read_parameter2=>%entry%"~ file_prefix=CRE END
         LPF CRE_add_effect_inline STR_VAR arguments =EVALUATE_BUFFER ~opcode=>101 timing=>9 parameter2=>%entry%~ file_prefix=CRE END
          LPF CRE_immunity_to_opcode STR_VAR arguments END
       END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_immunity_to_opcode - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              give immunity to an icon (opcode 169)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_immunity_to_icon
       STR_VAR arguments=""
BEGIN
       PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
          LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET entry=entry arguments=list END
         LPF CRE_add_effect_inline STR_VAR arguments =EVALUATE_BUFFER ~opcode=>169 timing=>9 parameter2=>%entry%~ file_prefix=CRE END
          LPF CRE_immunity_to_icon STR_VAR arguments END
       END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_immunity_to_icon - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              enforce saving throws by class and level
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_enforce_saves
       STR_VAR arguments=""
BEGIN
       // initialise the enforced values
       PATCH_FOR_EACH save IN death wand polymorph breath spell BEGIN
          SET EVALUATE_BUFFER ~enforced_%save%~ = 20
       END
       // read in class and decompose
       LPF CRE_read_class RET classlist=value END
       // go through each class, get its saves for the CRE's level, and update the record of the correct saves
       SET levelnum=1
       WHILE ~%classlist%~ STRING_COMPARE ~~ BEGIN
          LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%classlist%~ separator ="_" RET classlist=list class=entry END
          TO_UPPER class
          PATCH_IF !VARIABLE_IS_SET $class_file_save_map(EVALUATE_BUFFER ~%class%~) BEGIN
             SPRINT core_type WAR
          END ELSE BEGIN
             SPRINT core_type $class_file_save_map(EVALUATE_BUFFER ~%class%~)
          END
          LPF ~CRE_read_level%levelnum%~ RET level=value END
          SET level=level<1?1:level
          SET level=level>maximum_character_level?maximum_character_level:level
          PATCH_FOR_EACH save IN death wand polymorph breath spell BEGIN
             SET possible = $saving_throw_value_base(~%core_type%~ ~%level%~ ~%save%~)
             SET EVALUATE_BUFFER ~enforced_%save%~ = EVALUATE_BUFFER ~enforced_%save%~ >possible ? possible : EVALUATE_BUFFER ~enforced_%save%~
          END
          SET levelnum=levelnum+1
       END
       // do the comparison
       PATCH_FOR_EACH save IN death wand polymorph breath spell BEGIN
          LPF ~CRE_read_save_vs_%save%~ RET currentsave = value END
          SET possiblesave = EVALUATE_BUFFER ~enforced_%save%~ 
          PATCH_MATCH ~%arguments%~ WITH
          at_worst
          BEGIN
             SET newsave=currentsave<possiblesave ? currentsave : possiblesave
          END
          at_best
          BEGIN
             SET newsave=currentsave>possiblesave ? currentsave : possiblesave
          END
          only_if_new
          BEGIN
             SET newsave=currentsave=255 ? possiblesave : currentsave
          END
          DEFAULT
             SET newsave=possiblesave
          END
          LPF ~CRE_save_vs_%save%~ INT_VAR arguments=newsave END
       END

END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_enforce_saves - -~ END



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              enforce THAC0 by class and level
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_enforce_thac0
       STR_VAR arguments=""
BEGIN
       CLEAR_ARRAY class_array
       CLEAR_ARRAY class_level
       CLEAR_ARRAY newthac0
       LPF CRE_read_class RET classlist=value END
       SET levelnum=1
       WHILE ~%classlist%~ STRING_COMPARE ~~ BEGIN
          LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%classlist%~ separator ="_" RET classlist=list class=entry END
          SET $newthac0(EVALUATE_BUFFER ~%class%~)=99
          LPF ~CRE_read_level%levelnum%~ RET level=value END
          PATCH_IF level=0 BEGIN
             SET level=1
          END
          SET $class_level(EVALUATE_BUFFER ~%class%~)=level
          SPRINT $class_array(EVALUATE_BUFFER ~%class%~) ~~
          SET levelnum=levelnum+1
       END
       INNER_ACTION BEGIN
          LAM read_in_thac0
       END

       SET possible=21
       SET rowcount=1
       WHILE (rowcount<thac0_table_read) BEGIN
         READ_2DA_ENTRY_FORMER thac0_table_read rowcount 0 class_in_table
         PATCH_IF VARIABLE_IS_SET $class_array(EVALUATE_BUFFER ~%class_in_table%~) BEGIN
                SET level = $class_level(EVALUATE_BUFFER ~%class_in_table%~)
                SET level = level > maximum_character_level ? maximum_character_level : level
                READ_2DA_ENTRY_FORMER thac0_table_read rowcount level temp
                SET possible = possible < temp ? possible : temp
         END
         SET rowcount=rowcount+1
       END
       PATCH_IF possible=21 BEGIN // didn't find anything
          LPF CRE_read_level1 RET level1=value END
          SET possible = level1 > 20 ? 0 : (20 - level1)
       END
       LPF CRE_read_thac0 RET current=value END
       PATCH_MATCH ~%arguments%~ WITH
       at_worst
       BEGIN
             SET new=current<possible ? current : possible
       END
          at_best
       BEGIN
             SET new=current>possible ? current : possible
       END
          only_if_new
       BEGIN
             SET new=current=255 ? possible : current
       END
          within_tolerance
          BEGIN
             LPF patch_check_ini STR_VAR ini=thac0_tolerance RET tolerance=value END
             SET new=(possible - current)<tolerance ? possible : current
       END
       DEFAULT
             SET new=possible
       END
       LPF CRE_thac0 INT_VAR arguments=new END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_enforce_thac0 - -~ END



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////// enforce hit points by class and level (note that this gets it wrong for dual-classed characters; our algorithm is a weighted average by level)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_enforce_hp BEGIN
       CLEAR_ARRAY class_list_array
       LPF CRE_read_class RET classlist=value END
       SET levelnum=0
       SET hptotal_max=0
       SET hptotal_min=0
       PATCH_IF !VARIABLE_IS_SET hitpoint_percentage BEGIN
          SET hitpoint_percentage=75
       END
       WHILE ~%classlist%~ STRING_COMPARE ~~ BEGIN
          SET levelnum=levelnum+1
          LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%classlist%~ separator ="_" RET classlist=list class=entry END
          LPF ~CRE_read_level%levelnum%~ RET level=value END
          PATCH_IF VARIABLE_IS_SET $class_hp_maximum(~%class%~ ~%level%~) BEGIN
             SET hptotal_max=hptotal_max + $class_hp_maximum(~%class%~ ~%level%~)
             SET hptotal_min=hptotal_min + $class_hp_minimum(~%class%~ ~%level%~)
          END ELSE BEGIN
             SET hptotal_max=hptotal_max+8*level
             SET hptotal_min=hptotal_min+level
          END
          SPRINT $class_array(EVALUATE_BUFFER ~%class%~) ~~
       END
        SET hptotal = (hptotal_max * hitpoint_percentage + hptotal_min * (100 - hitpoint_percentage) ) / 100
      SET possible=hptotal / levelnum
       LPF CRE_read_hp_max RET current=value END
       PATCH_MATCH ~%arguments%~ WITH
       at_worst
       BEGIN
             SET new=current>possible ? current : possible
       END
          at_best
       BEGIN
             SET new=current<possible ? current : possible
       END
          only_if_new
       BEGIN
             SET new=current=255 ? possible : current
       END
       DEFAULT
             SET new=possible
       END
       LPF CRE_hitpoints INT_VAR arguments=new END

END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_enforce_hp - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////// enforce animation type
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_enforce_animation 
   STR_VAR arguments=""
BEGIN
   SET continue=1
   PATCH_IF ~%arguments%~ STRING_EQUAL_CASE only_if_new BEGIN
         LPF CRE_read_animation_code RET oldcode=value END
         PATCH_IF !(oldcode = 0xffff) BEGIN
            SET continue=0
         END
   END
   PATCH_IF continue=1 BEGIN
       // try by class_gender_race first
       LPF CRE_read_class RET class=value END
       LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%class%~ separator = "_" RET class=entry END
       PATCH_MATCH ~%class%~ WITH
       ~DRUID~
       BEGIN
          SPRINT class CLERIC
       END
       ~PALADIN~ ~RANGER~
       BEGIN
          SPRINT class FIGHTER
       END
       ~SORCERER~
       BEGIN
          SPRINT class MAGE
       END
       ~BARD~
       BEGIN
          SPRINT class THIEF
       END
       DEFAULT
       END
       LPF CRE_read_race RET race=value END
       PATCH_MATCH ~%race%~ WITH
       ~HALF_ELF~
       BEGIN
          SPRINT race ELF
       END
       DEFAULT
       END
       LPF CRE_read_gender RET gender=value END
       SPRINT ~animation~ ~%class%_%gender%_%race%~
       SET animcode= IDS_OF_SYMBOL (~animate~ ~%animation%~)
       PATCH_IF animcode= ~-1~ BEGIN
          // try by race_gender
          SPRINT animation ~%race%_%gender%~
          SET animcode= IDS_OF_SYMBOL (~animate~ ~%animation%~)
       END
       PATCH_IF animcode= ~-1~ BEGIN
          // try by race
          SPRINT animation ~%race%~
          SET animcode= IDS_OF_SYMBOL (~animate~ ~%animation%~)
       END
       PATCH_IF !(animcode = ~-1~) BEGIN
          LPF CRE_animation_code INT_VAR arguments=animcode END
       END ELSE BEGIN
          LPF patch_display_warning STR_VAR warning=EVALUATE_BUFFER ~Failed to find animation %class%_%gender%_%race%, %race%_%gender%, %race%, or bespoke setting~ END
       END
   END

END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_enforce_animation - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////// steal colourscheme
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_steal_colors_from
      STR_VAR arguments=""
BEGIN
      SET foundcolours=0
      INNER_ACTION BEGIN
         ACTION_IF FILE_EXISTS_IN_GAME ~%arguments%.cre~ BEGIN
              OUTER_SET foundcolours=1
              COPY_EXISTING ~%arguments%.cre~ ~override~
                    PATCH_FOR_EACH color IN metal minor major skin leather armor hair BEGIN
                       LPF ~CRE_read_color_%color%~ RET EVALUATE_BUFFER ~color_%color%~ = value END
                    END
              BUT_ONLY
         END
      END
      PATCH_IF foundcolours=1 BEGIN
             PATCH_FOR_EACH color IN metal minor major skin leather armor hair BEGIN
                 LPF ~CRE_color_%color%~ INT_VAR arguments=EVALUATE_BUFFER ~color_%color%~ END
             END
      END ELSE BEGIN
            LPF patch_display_warning STR_VAR warning=EVALUATE_BUFFER ~Tried to steal colors from %arguments%.cre, but it doesn't exist~ END
      END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_steal_colors_from - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////// steal soundset
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_steal_sounds_from
      STR_VAR arguments=""
BEGIN
      SET found=0
      INNER_ACTION BEGIN
         ACTION_IF FILE_EXISTS_IN_GAME ~%arguments%.cre~ BEGIN
              OUTER_SET found=1
              COPY_EXISTING ~%arguments%.cre~ ~override~
                    READ_ASCII 0xa4 sounddata (0x190)
              BUT_ONLY
         END
      END
      PATCH_IF found=1 BEGIN
             WRITE_ASCIIE 0xa4 ~%sounddata%~ (0x190)
      END ELSE BEGIN
            LPF patch_display_warning STR_VAR warning=EVALUATE_BUFFER ~Tried to steal soundset from %arguments%.cre, but it doesn't exist~ END
      END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_steal_sounds_from - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////// add a list of items
/////////////
///////////// syntax is add_item => ~string~
///////////// string is list in format ITEMNAME or ITEMNAME(arguments)
///////////// arguments is either (arg) or (arg,arg)
///////////// arg is either a slot name (case-insensitive) or xNUM
///////////// NUM is either a number or n.m.o - in the latter case it's the number to go into each item-num slot
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_add_items
       INT_VAR replace=0
       STR_VAR arguments=""
BEGIN
       INNER_ACTION BEGIN
          LAUNCH_ACTION_MACRO read_in_item_types
       END
       WHILE ~%arguments%~ STRING_COMPARE ~~ BEGIN
          SPRINT ~slot~ ~NONE~
          SET num1=0
          SET num2=0
          SET num3=0
          SET twohanded=0
          LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET entry=entry arguments=list END
          LPF return_function_and_argument STR_VAR input=EVALUATE_BUFFER ~%entry%~ RET item=function properties=argument END
          TO_LOWER ~item~
          WHILE ~%properties%~ STRING_COMPARE ~~ BEGIN
            LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%properties%~ separator = "," RET arg_entry=entry properties=list END
            LPF return_first_letter STR_VAR input=EVALUATE_BUFFER ~%arg_entry%~ RET firstletter=firstletter rest=rest END
            PATCH_IF ~%firstletter%~ STRING_EQUAL_CASE "X" BEGIN // it's numeric
                SET entrynumber=1
                WHILE ~%rest%~ STRING_COMPARE_CASE ~~ BEGIN
                   LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%rest%~ separator = "\." RET entry=entry rest=list END
                   SET EVALUATE_BUFFER ~num%entrynumber%~= ~%entry%~
                   SET entrynumber=entrynumber+1
                END
            END ELSE BEGIN // it's a slot
                TO_UPPER ~arg_entry~
                SPRINT ~slot~ ~%arg_entry%~
            END
          END
          PATCH_IF ~%slot%~ STRING_EQUAL_CASE ~NONE~ BEGIN
                INNER_ACTION BEGIN
                   ACTION_IF FILE_EXISTS_IN_GAME ~%item%.itm~ BEGIN
                        COPY_EXISTING ~%item%.itm~ ~override~
                                      SPRINT ~ITM_file~ ~%SOURCE_RES%~
                                      TO_LOWER ~ITM_file~
                                      READ_SHORT 0x1c item_type_code
                                      PATCH_IF VARIABLE_IS_SET $item_location_map(EVALUATE_BUFFER ~%item_type_code%~) BEGIN
                                               SPRINT ~slot~ $item_location_map(~%item_type_code%~)
                                               TO_UPPER ~slot~
                                      END ELSE BEGIN
                                               SPRINT ~slot~ INV
                                      END
                        BUT_ONLY
                   END ELSE BEGIN
                        LAF action_display_warning STR_VAR warning=EVALUATE_BUFFER "Warning: tried to add item %item%, but it doesn't (yet) exist and you haven't told me its slot" END
                   END
                END
          END
          PATCH_IF ~%slot%~ STRING_COMPARE_CASE ~NONE~ BEGIN
           PATCH_IF ~%slot%~ STRING_EQUAL_CASE ~two-handed~ BEGIN
             SPRINT ~slot~ ~WEAPON~
             SET twohanded=1
           END
           PATCH_IF replace BEGIN
              SPRINT string ~REPLACE_CRE_ITEM~
           END ELSE BEGIN
              SPRINT string ~ADD_CRE_ITEM~
           END
           SPRINT ~string~ ~%string% %item% #%num1% #%num2% #%num3% NONE %slot%~
           PATCH_IF ~%slot%~ STRING_EQUAL_CASE ~WEAPON~ BEGIN
             SPRINT ~string~ ~%string% EQUIP~
             PATCH_IF twohanded=1 BEGIN
                SPRINT ~string~ ~%string% TWOHANDED~
             END
           END
           LPF patch_reinclude_this STR_VAR input=EVALUATE_BUFFER ~%string%~ END
          END

       END
END

DEFINE_PATCH_FUNCTION CRE_replace_items
       STR_VAR arguments=""
BEGIN
   LPF CRE_add_items INT_VAR replace=1 STR_VAR arguments END
END

LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_add_items - -~ END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_replace_items - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////// remove items - just a hook for extant code
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_remove_items
        STR_VAR arguments=""
BEGIN
        PATCH_IF ~%arguments%~ STRING_EQUAL_CASE ~all~ BEGIN
           SPRINT ~temp~ ~REMOVE_CRE_ITEMS~
        END ELSE BEGIN
           SPRINT ~temp~ ~REMOVE_CRE_ITEM %arguments%~
        END
        LPF patch_reinclude_this STR_VAR input=EVALUATE_BUFFER ~%temp%~ END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_remove_items - -~ END




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////// build a basic creature
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_build 
BEGIN
   ///// basic structure
   DELETE_BYTES 0x0 BUFFER_LENGTH
   INSERT_BYTES 0x0 0x434

   // sig
   WRITE_ASCII 0x0 ~CRE V1.0~
  // name
   WRITE_LONG 0x8 ~-1~
   WRITE_LONG 0xc ~-1~
   // hit points
   WRITE_SHORT 0x24 0xff
   WRITE_SHORT 0x24 0xff
   // animation
   WRITE_SHORT 0x28 0xffff
   // effect flag
   WRITE_BYTE 0x33 1
   // portrait
   WRITE_ASCII 0x34 None
   WRITE_ASCII 0x3c None
   // AC
   WRITE_SHORT 0x46 10
   WRITE_SHORT 0x48 10
   // THAC0
   WRITE_BYTE 0x52 0xff
   // #at
   WRITE_BYTE 0x53 1
   // saves
   WRITE_BYTE 0x54 0xff
   WRITE_BYTE 0x55 0xff
   WRITE_BYTE 0x56 0xff
   WRITE_BYTE 0x57 0xff
   WRITE_BYTE 0x58 0xff
   SET sound_loc=0xa4
   WHILE sound_loc < 0x234 BEGIN
      WRITE_LONG sound_loc ~-1~
      SET sound_loc = sound_loc +4
   END
   // level
   WRITE_BYTE 0x234 1
   WRITE_BYTE 0x235 1
   WRITE_BYTE 0x236 1
   // sex
   WRITE_BYTE 0x237 1
   // abilities
   WRITE_BYTE 0x238 9
   WRITE_BYTE 0x23a 9
   WRITE_BYTE 0x23b 9
   WRITE_BYTE 0x23c 9
   WRITE_BYTE 0x23d 9
   WRITE_BYTE 0x23e 9
   // morale [NEEDS RESEARCH]
   WRITE_BYTE 0x23f 10
   WRITE_BYTE 0x240 5
   WRITE_BYTE 0x242 60
   // racial enemy
   WRITE_BYTE 0x241 0xff
   // EA 
   WRITE_BYTE 0x270 128
   // general
   WRITE_BYTE 0x271 1
   // race
   WRITE_BYTE 0x272 1
   // class
   WRITE_BYTE 0x273 0xff
   // gender
   WRITE_BYTE 0x275 1
   // alignment
   WRITE_BYTE 0x27b 34
   // probably needs this value
   WRITE_SHORT 0x27c 0xffff
   WRITE_SHORT 0x27e 0xffff
   ////
   //offsets
   WRITE_LONG 0x2a0 0x2d4
   WRITE_LONG 0x2a8 0x2d4
   WRITE_LONG 0x2ac 17
   WRITE_LONG 0x2b0 0x3e4
   WRITE_LONG 0x2b8 0x3e4
   WRITE_LONG 0x2bc 0x3e4
   WRITE_LONG 0x2c4 0x3e4
  //memorization data
   //priest
   FOR(level=0;level<7;level=level+1) BEGIN
     WRITE_SHORT level* 0x10 + 0x2d4 ~level~
   END
 // wizard
   FOR(level=0;level<9;level=level+1) BEGIN
      WRITE_SHORT level* 0x10 + 0x344 ~level~
      WRITE_SHORT 0x6 + level* 0x10 + 0x344 1
   END
   // innate
   WRITE_SHORT 0x3da 2
    // item slot wipe
   FOR (i=0x3e4;i<0x430;i=i+2) BEGIN
      WRITE_SHORT i ~-1~
   END

END

DEFINE_PATCH_FUNCTION CRE_postbuild 
BEGIN
   LPF CRE_enforce_saves STR_VAR arguments=only_if_new END
   LPF CRE_enforce_thac0 STR_VAR arguments=only_if_new END
   LPF CRE_enforce_animation STR_VAR arguments=only_if_new END


END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              add an effect (via a patch)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_add_effect
          STR_VAR arguments=""  // this is a patch
                  file_prefix=""
BEGIN
     LPF CRE_read_effect_type RET value=value END
     PATCH_IF value=0 BEGIN
        LPF CRE_modernise RET value=value END
     END
     PATCH_IF value=1 BEGIN
        SPRINT EVALUATE_BUFFER ~%arguments%_type~ ~effect~
        LPF add_entry STR_VAR file_prefix arguments END
     END ELSE BEGIN
              PATCH_IF enhanced_edition=0 BEGIN
                 LPF add_effect STR_VAR arguments = EVALUATE_BUFFER ~%arguments%~ file_prefix=CRE END
              END
     END
END

DEFINE_PATCH_FUNCTION CRE_add_effect_inline
          STR_VAR arguments=""
                  file_prefix=""
BEGIN
     LPF CRE_read_effect_type RET value=value END
     PATCH_IF value=0 BEGIN
        LPF CRE_modernise RET value=value END
     END
     PATCH_IF value=1 BEGIN
        SPRINT ~arguments~ ~%arguments% type=>effect~
        LPF add_entry_inline STR_VAR file_prefix arguments END
     END ELSE BEGIN
              PATCH_IF enhanced_edition=0 BEGIN
                 LPF add_effect_inline STR_VAR arguments = EVALUATE_BUFFER ~%arguments%~ file_prefix=CRE END
              END
     END
END

DEFINE_PATCH_FUNCTION CRE_quick_effect  // defaults to instant/permanent, target: self
          STR_VAR arguments=""
                  file_prefix=""
BEGIN
     LPF CRE_add_effect_inline STR_VAR arguments = EVALUATE_BUFFER ~target=>1 timing=>9 %arguments%~ file_prefix=CRE END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_add_script - -~ END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_add_effect_inline - -~ END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_quick_effect - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              find the current value of a proficiency
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_read_proficiency
          STR_VAR arguments=""
          RET value
BEGIN
         SET value=0
         TO_UPPER arguments
         SPRINT prof ~PROFICIENCY%arguments%~
         SET prof_int_target=IDS_OF_SYMBOL (~stats~ ~%prof%~)
         SPRINT entry_type effect
         SPRINT file_prefix CRE
         LAUNCH_PATCH_MACRO get_offset_array
         SET prof=0
         PHP_EACH offset_array AS int =>offset_base BEGIN
            LPF CRE_read_opcode INT_VAR offset_base=EVALUATE_BUFFER ~%offset_base%~ RET opcode=value END
            PATCH_IF opcode=233 BEGIN
               LPF CRE_read_parameter2 INT_VAR offset_base=EVALUATE_BUFFER ~%offset_base%~ RET prof_int=value END
               PATCH_IF prof_int=prof_int_target BEGIN
                  LPF CRE_read_parameter1 INT_VAR offset_base=EVALUATE_BUFFER ~%offset_base%~ RET value=value END
               END
            END
         END

END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_read_proficiency - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              add a proficiency (by name)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_add_proficiencies
          STR_VAR arguments=""
BEGIN
         LPF CRE_modernise RET value=value END
         PATCH_IF value BEGIN
           PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
             LPF return_first_pair STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET prof=key add=value arguments=list END
             LPF CRE_read_proficiency STR_VAR arguments=EVALUATE_BUFFER ~%prof%~ RET old_value=value END
             TO_UPPER prof
             SET_BG2_PROFICIENCY ~PROFICIENCY%prof%~ old_value+add
             LPF CRE_add_proficiencies STR_VAR arguments=EVALUATE_BUFFER ~%arguments%~ END
           END
         END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_add_proficiencies - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              set a proficiency
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_set_proficiencies
          STR_VAR arguments=""
BEGIN
         LPF CRE_modernise END
         PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
             LPF return_first_pair STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET prof=key set=value arguments=list END
             TO_UPPER prof
             SET_BG2_PROFICIENCY ~PROFICIENCY%prof%~ set
             LPF CRE_set_proficiencies STR_VAR arguments=EVALUATE_BUFFER ~%arguments%~ END
         END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_set_proficiencies - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              wipe existing proficiencies (BG1 and BG2)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_wipe_proficiencies
          STR_VAR arguments=""
BEGIN
          LPF CRE_modernise RET value=value END
          PATCH_IF value BEGIN
            WRITE_ASCII 0x6e ~~ (8)
            LPF CRE_delete_opcodes STR_VAR arguments=233 END
          END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_wipe_proficiencies - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              swap an item
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_swap_items
          STR_VAR arguments=""
BEGIN
         PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
             LPF return_first_pair STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET old=key new=value arguments=list END
             REPLACE_TEXTUALLY CASE_INSENSITIVE ~%old%~ ~%new%~ (8)
             LPF CRE_swap_items STR_VAR arguments=EVALUATE_BUFFER ~%arguments%~ END
         END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_swap_items - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              delete specified effects
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_delete_opcodes
          STR_VAR arguments=""
BEGIN
         PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
            LPF CRE_read_effect_type RET value=value END
            PATCH_IF value=0 BEGIN
                LPF FJ_CRE_VALIDITY END // shift to EFF v2
            END
            LPF return_first_entry STR_VAR list=EVALUATE_BUFFER ~%arguments%~ RET entry=entry arguments=list END
            LPF delete_entries_inline STR_VAR arguments=EVALUATE_BUFFER ~match=>opcode check=>%entry% type=>effect~ file_prefix=CRE END
            LPF CRE_delete_opcodes STR_VAR arguments END
         END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_delete_opcodes - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              PC detector  (assumes a PC grid already read in)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_is_PC
        STR_VAR filename=""
        RET value
BEGIN
        LPF CRE_read_dv RET dv=value END
        TO_LOWER dv
        PATCH_IF VARIABLE_IS_SET $script_name_pdialog(EVALUATE_BUFFER ~%dv%~) BEGIN
           SET value=1
        END ELSE BEGIN
           PATCH_IF ~%filename%~ STRING_EQUAL_CASE ~charbase~ BEGIN
              SET value=1
           END ELSE BEGIN
              SET value=0
           END
        END

END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_PC - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              warrior detector
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_is_warrior
        STR_VAR class=UNKNOWN
        RET value
BEGIN
        PATCH_IF ~%class%~ STRING_EQUAL_CASE UNKNOWN BEGIN
            LPF CRE_read_class RET class=value END
        END
        PATCH_MATCH ~%class%~ WITH
           FIGHTER PALADIN RANGER FIGHTER_MAGE FIGHTER_CLERIC FIGHTER_THIEF FIGHTER_DRUID FIGHTER_MAGE_CLERIC FIGHTER_MAGE_THIEF
        BEGIN
           SET value=1
        END
        DEFAULT
           SET value=0
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_warrior - -~ END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////             thief detector
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_is_thief
        RET value
BEGIN
        LPF CRE_read_class RET class=value END
        PATCH_MATCH ~%class%~ WITH
           THIEF CLERIC_THIEF MAGE_THIEF FIGHTER_THIEF FIGHTER_MAGE_THIEF
        BEGIN
           SET value=1
        END
        DEFAULT
           SET value=0
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_thief - -~ END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////             innocence detector
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_is_innocent
        RET value
BEGIN
        LPF CRE_read_class RET class=value END
        PATCH_MATCH ~%class%~ WITH
           INNOCENT
        BEGIN
           SET value=1
        END
        DEFAULT
           SET value=0
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_thief - -~ END



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////             alignment detectors
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_is_evil
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           LAWFUL_EVIL CHAOTIC_EVIL NEUTRAL_EVIL
        BEGIN
           SET value=1
        END
        DEFAULT
           SET value=0
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_evil - -~ END



DEFINE_PATCH_FUNCTION CRE_is_good
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           LAWFUL_GOOD CHAOTIC_GOOD NEUTRAL_GOOD
        BEGIN
           SET value=1
        END
        DEFAULT
           SET value=0
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_good - -~ END

DEFINE_PATCH_FUNCTION CRE_is_lawful
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           LAWFUL_GOOD LAWFUL_NEUTRAL LAWFUL_EVIL
        BEGIN
           SET value=1
        END
        DEFAULT
           SET value=0
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_lawful - -~ END

DEFINE_PATCH_FUNCTION CRE_is_chaotic
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           CHAOTIC_GOOD CHAOTIC_NEUTRAL CHAOTIC_EVIL
        BEGIN
           SET value=1
        END
        DEFAULT
           SET value=0
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_chaotic - -~ END

DEFINE_PATCH_FUNCTION CRE_is_geneutral
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           NEUTRAL LAWFUL_NEUTRAL CHAOTIC_NEUTRAL NONE
        BEGIN
           SET value=1
        END
        DEFAULT
           SET value=0
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_geneutral - -~ END


DEFINE_PATCH_FUNCTION CRE_is_lcneutral
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           NEUTRAL NEUTRAL_GOOD NEUTRAL_EVIL NONE
        BEGIN
           SET value=1
        END
        DEFAULT
           SET value=0
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_lcneutral - -~ END



DEFINE_PATCH_FUNCTION CRE_make_lawful
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           NEUTRAL CHAOTIC_NEUTRAL NONE
        BEGIN
           LPF CRE_alignment STR_VAR arguments=LAWFUL_NEUTRAL END
        END
           NEUTRAL_GOOD CHAOTIC_GOOD
        BEGIN
           LPF CRE_alignment STR_VAR arguments=LAWFUL_GOOD END
        END
           NEUTRAL_EVIL CHAOTIC_EVIL
        BEGIN
           LPF CRE_alignment STR_VAR arguments=LAWFUL_EVIL END
        END
        DEFAULT
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_make_lawful - -~ END



DEFINE_PATCH_FUNCTION CRE_make_chaotic
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           NEUTRAL LAWFUL_NEUTRAL NONE
        BEGIN
           LPF CRE_alignment STR_VAR arguments=CHAOTIC_NEUTRAL END
        END
           NEUTRAL_GOOD LAWFUL_GOOD
        BEGIN
           LPF CRE_alignment STR_VAR arguments=CHAOTIC_GOOD END
        END
           NEUTRAL_EVIL LAWFUL_EVIL
        BEGIN
           LPF CRE_alignment STR_VAR arguments=CHAOTIC_EVIL END
        END
        DEFAULT
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_make_chaotic - -~ END

DEFINE_PATCH_FUNCTION CRE_make_lcneutral
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           CHAOTIC_NEUTRAL LAWFUL_NEUTRAL NONE
        BEGIN
           LPF CRE_alignment STR_VAR arguments=NEUTRAL END
        END
           CHAOTIC_GOOD LAWFUL_GOOD
        BEGIN
           LPF CRE_alignment STR_VAR arguments=NEUTRAL_GOOD END
        END
           CHAOTIC_EVIL LAWFUL_EVIL
        BEGIN
           LPF CRE_alignment STR_VAR arguments=NEUTRAL_EVIL END
        END
        DEFAULT
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_make_lcneutral - -~ END


DEFINE_PATCH_FUNCTION CRE_make_good
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           NEUTRAL NEUTRAL_EVIL NONE
        BEGIN
           LPF CRE_alignment STR_VAR arguments=NEUTRAL_GOOD END
        END
           CHAOTIC_NEUTRAL CHAOTIC_EVIL
        BEGIN
           LPF CRE_alignment STR_VAR arguments=CHAOTIC_GOOD END
        END
           LAWFUL_NEUTRAL LAWFUL_EVIL
        BEGIN
           LPF CRE_alignment STR_VAR arguments=LAWFUL_GOOD END
        END
        DEFAULT
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_make_good - -~ END

DEFINE_PATCH_FUNCTION CRE_make_evil
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           NEUTRAL NEUTRAL_GOOD NONE
        BEGIN
           LPF CRE_alignment STR_VAR arguments=NEUTRAL_EVIL END
        END
           CHAOTIC_NEUTRAL CHAOTIC_GOOD
        BEGIN
           LPF CRE_alignment STR_VAR arguments=CHAOTIC_EVIL END
        END
           LAWFUL_NEUTRAL LAWFUL_GOOD
        BEGIN
           LPF CRE_alignment STR_VAR arguments=LAWFUL_EVIL END
        END
        DEFAULT
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_make_evil - -~ END


DEFINE_PATCH_FUNCTION CRE_make_geneutral
        RET value
BEGIN
        LPF CRE_read_alignment RET alignment=value END
        PATCH_MATCH ~%alignment%~ WITH
           NEUTRAL_EVIL NEUTRAL_GOOD NONE
        BEGIN
           LPF CRE_alignment STR_VAR arguments=NEUTRAL END
        END
           CHAOTIC_EVIL CHAOTIC_GOOD
        BEGIN
           LPF CRE_alignment STR_VAR arguments=CHAOTIC_NEUTRAL END
        END
           LAWFUL_EVIL LAWFUL_GOOD
        BEGIN
           LPF CRE_alignment STR_VAR arguments=LAWFUL_NEUTRAL END
        END
        DEFAULT
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_make_geneutral - -~ END



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////             return item in a given slot
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_read_item_in_slot
        STR_VAR arguments=""
        RET value
BEGIN
        PATCH_IF !VARIABLE_IS_SET $item_slot_map(0) BEGIN
           INNER_ACTION BEGIN
              LAUNCH_ACTION_MACRO read_in_item_slots
           END
        END
        TO_UPPER arguments
        SET slot_loc=$item_slot_map(~%arguments%~)
        SET offset_slot=2*slot_loc+LONG_AT $CREoffset_loc(~item_slots~)
        READ_SSHORT offset_slot item_num
        PATCH_IF item_num= ~-1~ BEGIN
          SPRINT value ~~
        END ELSE BEGIN
          SET offset_base=LONG_AT $CREoffset_loc(~item~) + item_num * $CREentry_length(~item~)
          LPF CRE_read_item_resource STR_VAR offset_base RET value=value END
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_read_item_in_slot - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////             check if creature has a given spell
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_has_spell
        STR_VAR arguments=""
        RET value
BEGIN
        SET value=0
        LPF get_spellcode STR_VAR input=EVALUATE_BUFFER ~%arguments%~ RET spell=value END
        SPRINT entry_type memorized_spell
        SPRINT file_prefix CRE
        LAUNCH_PATCH_MACRO get_offset_array
        PHP_EACH offset_array AS int=>offset_base BEGIN
           LPF CRE_read_memorized_spell STR_VAR offset_base RET spell_here=value END
           PATCH_IF ~%spell_here%~ STRING_EQUAL_CASE ~%spell%~ BEGIN
              SET value=1
           END
        END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_has_spell - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////             check if creature is dead
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_is_dead
RET value
BEGIN
     LPF CRE_read_state_dead RET value1=value END
     LPF CRE_read_state_stone_death RET value2=value END
     value= (value1 || value2)
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_is_dead - -~ END


/////////////////////////////////////////////////////////////////////////////////////////////
///        Returns 1 if creature is unintelligent
/////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_check_if_moron  // morons, by definition, are non-zombies, non-golems, and in one of the following categories: (i) general=HUMANOID,GIANTHUMANOID, or UNDEAD; (ii) race=DEMONIC, BEHOLDER or LYCANTHROPE; (iii) class=WOLF_VAMPIRIC, DOPPLEGANGER, or DRAGON
      RET value
BEGIN
      LPF CRE_read_race RET race=value END
      TO_UPPER race
      PATCH_MATCH ~%race%~ WITH
      ZOMBIE BEGIN
         SET value=1
      END
      DEMONIC DOPPLEGANGER LYCANTHROPE BEHOLDER BEGIN
         SET value=0
      END
      DEFAULT
         LPF CRE_read_general RET general=value END
         TO_UPPER general
         PATCH_MATCH ~%general%~ WITH
         HUMANOID GIANTHUMANOID BEGIN
            PATCH_MATCH ~%class%~ WITH
               GOLEM_STONE GOLEM_FLESH GOLEM_CLAY GOLEM_IRON BEGIN
                  SET value=1
               END
               DEFAULT
                  SET value=0
               END
         END
         UNDEAD BEGIN
               PATCH_IF (~%class%~ STRING_EQUAL SKELETON) BEGIN
                  SET value=1
               END ELSE BEGIN
                  SET value=0
               END
         END
         DEFAULT
            LPF CRE_read_class RET class=value END
            TO_UPPER class
            PATCH_MATCH ~%class%~ WITH
            DRAGON DOPPLEGANGER WOLF_VAMPIRIC BEGIN
               SET value=0
            END
            DEFAULT
               SET value=1
            END
         END
      END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_check_if_moron - -~ END


/////////////////////////////////////////////////////////////////////////////////////////////
///        logs the name of the creature
/////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION CRE_log_me STR_VAR filename="" arguments="" BEGIN
   LPF patch_log_this STR_VAR file=EVALUATE_BUFFER ~%arguments%~ input=EVALUATE_BUFFER ~%filename%~ repeat=no END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_log_me - -~ END


/////////////////////////////////////////////////////////////////////////////////////////////
///        shifts creature to the new Effect structure if applicable; return 1 if successful
/////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~CRE_modernise~ RET value BEGIN
            LPF CRE_read_effect_type RET eff_type=value END
            PATCH_IF eff_type=0 BEGIN
                READ_LONG 0x2c8 eff_num
                PATCH_IF eff_num=0 BEGIN
                   LPF CRE_effect_type STR_VAR arguments=1 END
                   SET value=1
                END ELSE BEGIN
                   PATCH_IF enhanced_edition=0 BEGIN
                     LPF FJ_CRE_VALIDITY END // shift to EFF v2
                     SET value=1
                   END ELSE BEGIN
                      // strictly I ought to write code here but life's too short and there are only 4 creatures affected, 3 of them irrelevantly
                      SET value=0
                   END
                END
            END ELSE BEGIN
               SET value=1
            END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_modernise - -~ END


/////////////////////////////////////////////////////////////////////////////////////////////
///        find the highest spell level memorised
/////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_find_highest_spell_level
STR_VAR arguments=mage
RET value
BEGIN
   SET value=0
   SPRINT file_prefix CRE
   SPRINT entry_type memorization_info
   LAUNCH_PATCH_MACRO get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
        READ_SHORT offset_base level
        READ_SHORT offset_base+0xc number
        READ_SHORT offset_base+0x6 type
        PATCH_IF number>0 BEGIN
           SET true_level=level+1
           PATCH_IF true_level>value BEGIN
              PATCH_IF ((~%arguments%~ STRING_EQUAL_CASE mage && type=1) || (~%arguments%~ STRING_EQUAL_CASE priest && type=0)) BEGIN
                 SET value=true_level
              END
           END
        END
   END

END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_find_highest_spell_level - -~ END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////             set the name
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_set_name
   STR_VAR arguments=""
BEGIN
   LPF patch_text_entry STR_VAR function=set_string loc=0xc arguments=EVALUATE_BUFFER ~%arguments%~ END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_set_name - -~ END


DEFINE_PATCH_FUNCTION CRE_set_unidentified_name
   STR_VAR arguments=""
BEGIN
   LPF patch_text_entry STR_VAR function=set_string loc=0x8 arguments=EVALUATE_BUFFER ~%arguments%~ END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_set_unidentified_name - -~ END

DEFINE_PATCH_FUNCTION CRE_say_name
   STR_VAR arguments=""
BEGIN
   LPF say_this_here INT_VAR offset=0x8 say=EVALUATE_BUFFER ~%arguments%~ END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_say_name - -~ END

DEFINE_PATCH_FUNCTION CRE_say_unidentified_name
   STR_VAR arguments=""
BEGIN
   LPF say_this_here INT_VAR offset=0xc say=EVALUATE_BUFFER ~%arguments%~ END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_say_unidentified_name - -~ END


DEFINE_PATCH_FUNCTION CRE_set_both_names
   STR_VAR arguments=""
BEGIN
   LPF CRE_set_name STR_VAR arguments END
   LPF CRE_set_unidentified_name STR_VAR arguments END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_set_both_names - -~ END


DEFINE_PATCH_FUNCTION CRE_say_both_names
   STR_VAR arguments=""
BEGIN
   LPF CRE_say_name STR_VAR arguments END
   LPF CRE_say_unidentified_name STR_VAR arguments END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_say_both_names - -~ END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
///       make casting innate
/////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_make_casting_innate
STR_VAR arguments=""
BEGIN
    PATCH_IF ~%arguments%~ STRING_EQUAL_CASE null BEGIN
         SET value=1
    END ELSE BEGIN
         LPF check_label STR_VAR label=dw#fiend_innate RET value=value END
    END
    PATCH_IF value BEGIN
      LPF CRE_immunity_to_opcode STR_VAR file_prefix=CRE arguments=60 END
      LPF CRE_delete_opcodes STR_VAR file_prefix=CRE arguments=189 END
      LPF CRE_quick_effect STR_VAR file_prefix=CRE arguments=~opcode=>189 parameter1=>10~ END
    END
END
LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_make_casting_innate - -~ END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
///       immunity to various elemental effects
/////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_immunity
STR_VAR arguments=""
BEGIN
   PATCH_MATCH ~%arguments%~ WITH
    FIRE fire BEGIN
        LPF CRE_immunity_to_spell STR_VAR arguments=EVALUATE_BUFFER ~%RED_DRAGON_HIT% %WIZARD_METEOR_SWARM% %WIZARD_INCENDIARY_CLOUD% %CLERIC_FIRE_STORM% %WIZARD_FIREBALL% %WIZARD_DELAYED_BLAST_FIREBALL% %DEATHKNIGHT_FIREBALL% %WIZARD_SUN_FIRE%~ END
        LPF CRE_resist_fire STR_VAR arguments=100 END
    END
    COLD cold BEGIN
        LPF CRE_immunity_to_spell STR_VAR arguments=EVALUATE_BUFFER ~%WIZARD_ICE_STORM% %WIZARD_CONE_OF_COLD% %SILVER_DRAGON_BREATH_COLD%~ END
        LPF CRE_resist_cold STR_VAR arguments=100 END
    END
    ACID acid BEGIN
        LPF CRE_immunity_to_spell STR_VAR arguments=EVALUATE_BUFFER ~%WIZARD_DEATH_FOG%~ END
        LPF CRE_resist_acid STR_VAR arguments=100 END
    END
    ELECTRICITY LIGHTNING electricity lightning BEGIN
        LPF CRE_immunity_to_spell STR_VAR arguments=EVALUATE_BUFFER ~%WIZARD_LIGHTNING_BOLT% %WIZARD_CHAIN_LIGHTNING% %SILVER_DRAGON_BREATH_COLD% %CLERIC_CALL_LIGHTNING%~ END
        LPF CRE_resist_electricity STR_VAR arguments=100 END
    END
    INSECTS insects INSECT insect BEGIN
        LPF CRE_immunity_to_spell STR_VAR arguments=EVALUATE_BUFFER ~%CLERIC_SUMMON_INSECTS% %CLERIC_INSECT_PLAGUE% %CLERIC_CREEPING_DOOM% %BLACK_DRAGON_INSECT%~ END
    END
    POISON poison BEGIN
       LPF CRE_immunity_to_spell STR_VAR arguments=EVALUATE_BUFFER ~%CLERIC_POISON% %WIZARD_CLOUDKILL%~ END
       LPF CRE_immunity_to_opcode STR_VAR arguments=25 END
       LPF CRE_quick_effect STR_VAR arguments=~opcode=>173 parameter1=>100~ END
    END
    DEFAULT
       LPF patch_display_warning STR_VAR warning=EVALUATE_BUFFER ~Unrecognised immunity type %arguments% IN CRE_immunity~ END
    END

END

LAF log_this STR_VAR file=auto_function_list.txt input=EVALUATE_BUFFER ~CRE_immunity - -~ END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
///      code to make creatures tougher in a diff-slider-conditional way
/////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION diff_based_clone 
   STR_VAR creature=""
           edits=""
           editstring=""
           hardname=""
BEGIN
    LAF action_check_ini STR_VAR ini=Enable_Easy_Option RET value=value END
    ACTION_IF value BEGIN

       LAF clone_creature STR_VAR creature=EVALUATE_BUFFER ~%creature%=>%hardname%~ edits=EVALUATE_BUFFER ~%edits%~ editstring=EVALUATE_BUFFER ~%editstring% strip_script=>dw#swpup insert_script_high=>dw#swpdn~ END
       LAF edit_creature STR_VAR creature=EVALUATE_BUFFER ~%creature%~ edits=~~ editstring=~strip_script=>dw#swpup insert_script_high=>dw#swpup~ END

    END ELSE BEGIN

       LAF edit_creature STR_VAR creature=EVALUATE_BUFFER ~%creature%~ edits=EVALUATE_BUFFER ~%edits%~ editstring=EVALUATE_BUFFER ~%editstring%~ END

    END


END

