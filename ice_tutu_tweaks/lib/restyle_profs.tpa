// allows us to regexp match tabs and newlines
INCLUDE ~ice_tutu_tweaks/lib/extra_regexp_vars.tph~


// Make sure PROFICIENCYCLUB does what you expect

// Quick note: if a given number has multiple symbols in whatever.ids, WeiDU
// will grab the latest name when doing number => symbol, whereas Near Infinity
// grabs the first name (and they both will consider the other symbols when
// doing symbol => number). As such, if you want the old symbol to translate
// and the new one to be taken as default, make sure to sandwich your .ids file
// with the new symbol at the top and the bottom.

COPY_EXISTING ~stats.ids~ ~override~
ACTION_IF !(FILE_CONTAINS ~override/stats.ids~ ~PROFICIENCYCLUB~) THEN BEGIN
COPY_EXISTING ~stats.ids~ ~override~
REPLACE_TEXTUALLY ~115.*EXTRAPROFICIENCY1~ ~115 PROFICIENCYCLUB~

APPEND ~stats.ids~ ~115 EXTRAPROFICIENCY1~
APPEND ~stats.ids~ ~115 PROFICIENCYCLUB~
END


// to resolve ~#tlkref~ or ~@traref~ from strings
<<<<<<<< .../getstring.tpa
OUTER_PATCH ~1234~ BEGIN
SAY 0 ___subst___
READ_LONG 0 tb#strref
READ_STRREF 0 tb#name
END
>>>>>>>>

DEFINE_PATCH_MACRO ~tb#resolve~ BEGIN
/* accepts ~%tb#it_is%~ as a parameter
* returns the name of the BG1 proficiency as ~tb#name~
*/
INNER_ACTION BEGIN

SILENT
COPY - ~.../getstring.tpa~ ~.../getstring_real.tpa~
REPLACE_TEXTUALLY ___subst___ ~%subst%~
REINCLUDE ~.../getstring_real.tpa~
VERBOSE
END
END


// read the files
COPY - ~.../new_proficiencies.2da~ ~.../new_proficiencies.2da~
READ_2DA_ENTRIES_NOW new_proficiencies 3
number_of_proficiencies = new_proficiencies - 1
PATCH_IF number_of_proficiencies > 20 THEN BEGIN
PATCH_FAIL ~Can't have more than 20 proficiencies.~
END
FOR (i = 1; i < new_proficiencies; ++i) BEGIN
READ_2DA_ENTRY_FORMER new_proficiencies i 0 new
PATCH_IF tb#save_compatibility THEN BEGIN
idx = 0x58 + i
PATCH_IF idx = 98 THEN BEGIN
idx = 115
END ELSE PATCH_IF idx > 98 THEN BEGIN
--idx
END
END ELSE BEGIN
idx = 0x6b - number_of_proficiencies + i
PATCH_IF idx = 97 THEN BEGIN
idx = 115
END ELSE PATCH_IF idx < 97 THEN BEGIN
++idx
END
END
SET $new_lookup(EVALUATE_BUFFER ~%new%~) = idx
TEXT_SPRINT $i2da_lookup(EVALUATE_BUFFER ~%idx%~) ~%new%~
READ_2DA_ENTRY_FORMER new_proficiencies i 1 name
TEXT_SPRINT subst ~%name%~
LAUNCH_PATCH_MACRO ~tb#resolve~
SET $name_lookup(EVALUATE_BUFFER ~%idx%~) = tb#strref
READ_2DA_ENTRY_FORMER new_proficiencies i 2 desc
TEXT_SPRINT subst ~%desc%~
LAUNCH_PATCH_MACRO ~tb#resolve~
SET $desc_lookup(EVALUATE_BUFFER ~%idx%~) = tb#strref
END
BUT_ONLY

COPY - ~.../proficiency_map.2da~ ~.../proficiency_map.2da~
READ_2DA_ENTRIES_NOW proficiency_map 2
FOR (i = 1; i < proficiency_map; ++i) BEGIN
READ_2DA_ENTRY_FORMER proficiency_map i 0 old
READ_2DA_ENTRY_FORMER proficiency_map i 1 new
old = IDS_OF_SYMBOL (STATS ~PROFICIENCY%old%~)
new = $new_lookup (EVALUATE_BUFFER ~%new%~)
TEXT_SPRINT $ids_lookup(EVALUATE_BUFFER ~%old%~) ~%new%~
END
BUT_ONLY


// Look-up macros
DEFINE_PATCH_MACRO ~tb#is_it_a_proficiency~ BEGIN
/* accepts ~%proficiency%~ as a parameter
* returns tb#its_a_proficiency if it is a BG2 weapon proficiency
* its BG1 correspondant value is returned in tb#it_is (or 0 if to be removed) */

// non-proficiency values
tb#it_is = 0
tb#its_a_proficiency = 0

// weapon proficiency values
PATCH_IF VARIABLE_IS_SET $ids_lookup(EVALUATE_BUFFER ~%proficiency%~) &&
IS_AN_INT $ids_lookup(EVALUATE_BUFFER ~%proficiency%~) THEN BEGIN
tb#it_is = $ids_lookup(EVALUATE_BUFFER ~%proficiency%~)
tb#its_a_proficiency = 1
END

// Special: disable weapon styles if requested
PATCH_IF tb#tutu_realloc_style BEGIN
PATCH_IF proficiency >= 111 && proficiency <= 114 BEGIN
SET tb#it_is = 0
SET tb#its_a_proficiency = 1
END
END
END


// add the temporary system to stats.ids
OUTER_FOR (i = 89; i <= 107; i+=1) BEGIN
APPEND ~stats.ids~ ~%i% UNASSIGNED%i%~
END
ACTION_IF tb#tutu_realloc_style BEGIN
OUTER_FOR (i = 111; i <= 114; i+=1) BEGIN
APPEND ~stats.ids~ ~%i% UNASSIGNED%i%~
END
END

CLEAR_IDS_MAP


// patch DLG files
COPY_EXISTING_REGEXP GLOB ~.*\.dlg~ ~override~
DECOMPILE_DLG_TO_D
REPLACE_EVALUATE ~\([^A]\)PROFICIENCY\([2A-Z_]*\)~ BEGIN
TEXT_SPRINT result ~%MATCH0%~
proficiency = IDS_OF_SYMBOL (stats ~PROFICIENCY%MATCH2%~)
PATCH_IF proficiency > 0 THEN BEGIN
LAUNCH_PATCH_MACRO ~tb#is_it_a_proficiency~
PATCH_IF tb#it_is THEN BEGIN
PATCH_IF tb#its_a_proficiency THEN BEGIN
TEXT_SPRINT result ~%MATCH1%%tb#it_is%~
END
END ELSE BEGIN
TEXT_SPRINT result ~%MATCH1%UNUSED%proficiency%~
END
END
END ~%result%~
COMPILE_D_TO_DLG


// patch BCS files
COPY_EXISTING_REGEXP GLOB ~.*\.bcs~ ~override~
DECOMPILE_BCS_TO_BAF
REPLACE_EVALUATE ~UNASSIGNED\([0-9]*\)~ BEGIN
proficiency = MATCH1
LAUNCH_PATCH_MACRO ~tb#is_it_a_proficiency~
PATCH_IF tb#it_is THEN BEGIN
TEXT_SPRINT result ~UNASSIGNED%tb#it_is%~
END ELSE BEGIN
TEXT_SPRINT result ~UNASSIGNED%proficiency%~
END
END ~%result%~
COMPILE_BAF_TO_BCS
BUT_ONLY


// eradicate the old system from stats.ids and preserve the temporary
// system (for the sake of DLG files); see the not about sandwitching
COPY_EXISTING ~stats.ids~ ~override~
FOR (i = 89; i <= 107; ++i) BEGIN
REPLACE_TEXTUALLY ~^%i% PROFICIENCY.*~ ~%i% UNASSIGNED_TEMP%i%~
END
REPLACE_TEXTUALLY ~^115 PROFICIENCY.*~ ~115 UNASSIGNED_TEMP115~
PHP_EACH new_lookup AS name => value BEGIN
REPLACE_TEXTUALLY ~^%value% UNASSIGNED_TEMP.*~ ~%value% PROFICIENCY%name_0%~
END
PATCH_IF tb#tutu_realloc_style BEGIN
FOR (i = 111; i <= 114; i+=1) BEGIN
REPLACE_TEXTUALLY ~^%i% PROFICIENCY.*~ ~%i% UNASSIGNED%i%~
END
END

ACTION_PHP_EACH new_lookup AS name => value BEGIN
APPEND ~stats.ids~ ~%value% PROFICIENCY%name_0%~
END
COPY_EXISTING ~stats.ids~ ~override~
REPLACE_TEXTUALLY ~UNASSIGNED_TEMP~ ~UNASSIGNED~
CLEAR_IDS_MAP


// fix weapprof.2da
COPY_EXISTING ~weapprof.2da~ ~override~
READ_2DA_ENTRIES_NOW ~___weapprof~ 3
FOR (i = 0; VARIABLE_IS_SET EVALUATE_BUFFER "___weapprof_1_%i%"; i+=1) BEGIN END
SET classcnt = i
FOR (class = 4; class < classcnt; class += 1) BEGIN
READ_2DA_ENTRY_FORMER ~___weapprof~ 0 (class - 1) classname
FOR (i = 0x59; i <= 0x6c; i+=1) BEGIN
SET $max("%i%") = 0
END
SET $max(115) = 0
FOR (weap = 9; weap <= 28; weap +=1) BEGIN
READ_2DA_ENTRY_FORMER ~___weapprof~ weap class this
READ_2DA_ENTRY_FORMER ~___weapprof~ weap 1 proficiency
LAUNCH_MACRO_PATCH ~tb#is_it_a_proficiency~
SET v = $max("%tb#it_is%")
SET $max("%tb#it_is%") = (this > v ? this : v)
END
FOR (weap = 9; weap <= 28; weap +=1) BEGIN
READ_2DA_ENTRY_FORMER ~___weapprof~ weap 1 proficiency
SET_2DA_ENTRY_LATER ~_#_#_#weapprof~ weap class $max("%proficiency%")
END
END
INNER_PATCH ~1234~ BEGIN
SAY 0 ~Unused~
READ_LONG 0 ~Unused~
END
FOR (i = 9; i <= 28; i+=1) BEGIN
READ_2DA_ENTRY_FORMER ___weapprof i 1 prof_is
PATCH_IF VARIABLE_IS_SET $name_lookup(EVALUATE_BUFFER ~%prof_is%~) THEN BEGIN
SET_2DA_ENTRY_LATER ~_#_#_#weapprof~ i 0 $i2da_lookup(EVALUATE_BUFFER ~%prof_is%~)
SET_2DA_ENTRY_LATER ~_#_#_#weapprof~ i 2 $name_lookup(EVALUATE_BUFFER ~%prof_is%~)
SET_2DA_ENTRY_LATER ~_#_#_#weapprof~ i 3 $desc_lookup(EVALUATE_BUFFER ~%prof_is%~)
END ELSE BEGIN
SET_2DA_ENTRY_LATER ~_#_#_#weapprof~ i 0 UNUSED
SET_2DA_ENTRY_LATER ~_#_#_#weapprof~ i 2 ~%Unused%~
SET_2DA_ENTRY_LATER ~_#_#_#weapprof~ i 3 ~%Unused%~
END
END

PATCH_IF tb#tutu_realloc_style BEGIN
PATCH_FOR_EACH thisone IN ~2HANDED~ ~SWORDANDSHIELD~ ~SINGLEWEAPON~ ~2WEAPON~ BEGIN
REPLACE_TEXTUALLY ~^%thisone% ~ ~UNUSED ~
END
FOR (i = 29; i <= 33; i+=1) BEGIN
SET_2DA_ENTRY_LATER ~_#_#_#weapprof~ i 2 ~%Unused%~
SET_2DA_ENTRY_LATER ~_#_#_#weapprof~ i 3 ~%Unused%~
FOR (class = 4; class < classcnt; class += 1) BEGIN
SET_2DA_ENTRY_LATER ~_#_#_#weapprof~ i class 0
END
END
END
SET_2DA_ENTRIES_NOW ~_#_#_#weapprof~ 3
BUT_ONLY_IF_IT_CHANGES



// all items now use the new proficiencies
COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
PATCH_IF SOURCE_SIZE > 0x71 THEN BEGIN
READ_BYTE 0x31 proficiency
LAUNCH_PATCH_MACRO ~tb#is_it_a_proficiency~
PATCH_IF tb#its_a_proficiency BEGIN
WRITE_BYTE 0x31 tb#it_is
PATCH_IF ("%LANGUAGE%" STRING_COMPARE_CASE "english" = 0) BEGIN
INNER_PATCH 1234 BEGIN
WRITE_LONG 0 $name_lookup(EVALUATE_BUFFER ~%tb#it_is%~)
READ_STRREF 0 tb#name
END
PATCH_FOR_EACH this IN 0x54 80 BEGIN
READ_LONG this strref
PATCH_IF (("%strref%" < 2147483647) AND ("%strref%" > 0)) BEGIN
READ_STRREF this curdesc
INNER_PATCH_SAVE curdesc "%curdesc%" BEGIN
REPLACE_TEXTUALLY ~Proficiency\( Type\)?[:-].*~ ~Proficiency Type: %tb#name%~
END
SAY_EVALUATED this "%curdesc%"
END
END
END
END
END
BUT_ONLY_IF_IT_CHANGES

// adjust magical abilities
COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
~^.+\.itm$~ ~override~
PATCH_IF SOURCE_SIZE > 0x71 BEGIN
READ_ASCII 0 whatis (3)
PATCH_IF (~%whatis%~ STRING_EQUAL_CASE ~ITM~) /* if it's a ITM */ BEGIN
extended_header_size = 0x38
END ELSE BEGIN // otherwise it's a SPL
extended_header_size = 0x28
END
READ_LONG 0x64 ext_off
READ_SHORT 0x68 ext_count
READ_LONG 0x6a eff_off
READ_SHORT 0x6e eq_eff_indx
READ_SHORT 0x70 eq_eff_count
// check all equiped / global EFFS
FOR (i = 0; i < eq_eff_count; i += 1) BEGIN
READ_SHORT (0x30 * i + eq_eff_indx) + eff_off opcode ELSE 0
PATCH_IF (opcode = 233) BEGIN
READ_LONG (0x30 * i + eq_eff_indx) + eff_off + 8 proficiency ELSE 0
LAUNCH_PATCH_MACRO ~tb#is_it_a_proficiency~
PATCH_IF tb#its_a_proficiency BEGIN
PATCH_IF tb#it_is BEGIN
WRITE_LONG (0x30 * i + eq_eff_indx) + eff_off + 8 tb#it_is
END ELSE BEGIN // if I want to remove it altogether (IE, a style)
WRITE_SHORT (0x30 * i + eq_eff_indx) + eff_off + 0x12 0 /* -- */
END
END
END
END

// extended header EFFS
FOR (j = 0; j < ext_count; j += 1) BEGIN
READ_SHORT (ext_off + (j * extended_header_size) + 0x1e) ext_eff_count ELSE 0
READ_SHORT (ext_off + (j * extended_header_size) + 0x20) ext_eff_indx ELSE 0

FOR (i = 0; i < ext_eff_count; i += 1) BEGIN
READ_SHORT (0x30 * i + ext_eff_indx) + eff_off opcode ELSE 0
PATCH_IF (opcode = 233) BEGIN
READ_LONG (0x30 * i + ext_eff_indx) + eff_off + 8 proficiency ELSE 0
LAUNCH_PATCH_MACRO ~tb#is_it_a_proficiency~
PATCH_IF tb#its_a_proficiency BEGIN
PATCH_IF tb#it_is BEGIN
WRITE_LONG (0x30 * i + ext_eff_indx) + eff_off + 8 tb#it_is
END ELSE BEGIN // if I want to remove it altogether (IE, a style)
WRITE_SHORT (0x30 * i + ext_eff_indx) + eff_off + 0x12 0 /* -- */
END
END
END
END
END
END
BUT_ONLY_IF_IT_CHANGES

// adjust creature proficiencies
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
PATCH_IF (SOURCE_SIZE > 0x2d3) BEGIN
READ_LONG 0x2c4 effoff ELSE 0
READ_LONG 0x2c8 effcnt ELSE 0
READ_BYTE 0x33 effv2 ELSE 0
// initialize counters
SET unallocated = 0
FOR (i = 0x59; i <= 0x6c; i+= 1) BEGIN
SET $curmax("%i%") = 0
END
SET $curmax(115) = 0
PATCH_IF effv2 BEGIN
// Adjust proficiencies for EFF v2
FOR (i = 0; i < effcnt; i+=1) BEGIN
READ_LONG effoff + i * 0x108 + 0x8 opcode ELSE 0
READ_LONG effoff + i * 0x108 + 0x14 amount ELSE 0
READ_LONG effoff + i * 0x108 + 0x18 proficiency ELSE 0
PATCH_IF opcode = 233 BEGIN
LAUNCH_PATCH_MACRO "tb#is_it_a_proficiency"
PATCH_IF tb#its_a_proficiency BEGIN
PATCH_IF tb#it_is BEGIN
PATCH_IF $curmax("%tb#it_is%") < amount BEGIN
SET unallocated += $curmax("%tb#it_is%")
SET $curmax("%tb#it_is%") = amount
WRITE_LONG effoff + i * 0x108 + 0x18 tb#it_is
END ELSE BEGIN
SET unallocated += amount
WRITE_LONG effoff + i * 0x108 + 0x14 0
END
END ELSE BEGIN
SET unallocated += amount
WRITE_LONG effoff + i * 0x108 + 0x14 0 /* -- */
END
END
END
END
END ELSE BEGIN
// Adjust proficiencies for EFF v1
FOR (i = 0; i < effcnt; i+=1) BEGIN
READ_SHORT effoff + i * 0x30 opcode ELSE 0
READ_LONG effoff + i * 0x30 + 0x4 amount ELSE 0
READ_LONG effoff + i * 0x30 + 0x8 proficiency ELSE 0
PATCH_IF opcode = 233 BEGIN
LAUNCH_PATCH_MACRO "tb#is_it_a_proficiency"
PATCH_IF tb#its_a_proficiency BEGIN
PATCH_IF tb#it_is BEGIN
PATCH_IF $curmax("%tb#it_is%") < amount BEGIN
SET unallocated += $curmax("%tb#it_is%")
SET $curmax("%tb#it_is%") = amount
WRITE_LONG effoff + i * 0x30 + 8 tb#it_is
END ELSE BEGIN
SET unallocated += amount
WRITE_LONG effoff + i * 0x30 + 4 0
END
END ELSE BEGIN
SET unallocated += amount
WRITE_LONG effoff + i * 0x30 + 4 0 /* -- */
END
END
END
END
END
END
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP GLOB ~.*\.eff~ ~override~
READ_LONG 0x10 opcode ELSE 0
READ_LONG 0x20 proficiency ELSE 0
PATCH_IF opcode = 233 BEGIN
LAUNCH_PATCH_MACRO "tb#is_it_a_proficiency"
PATCH_IF tb#its_a_proficiency BEGIN
PATCH_IF tb#it_is BEGIN
WRITE_LONG 0x20 tb#it_is
END
END
END